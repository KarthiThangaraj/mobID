/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
export class ProgressBarComponent {
    constructor() {
        // Default color
        this.color = "#488aff";
    }
    /**
     * Returns a color for a certain percent
     * @param {?} percent The current progress
     * @return {?}
     */
    whichColor(percent) {
        // Get all entries index as an array
        /** @type {?} */
        let k = Object.keys(this.degraded);
        // Convert string to number
        k.forEach((e, i) => k[i] = +e);
        // Sort them by value
        k = k.sort((a, b) => a - b);
        // Percent as number
        /** @type {?} */
        let p = +percent
        // Set last by default as the first occurrence
        ;
        // Set last by default as the first occurrence
        /** @type {?} */
        let last = k[0];
        // Foreach keys 
        for (let val of k) {
            // if current val is < than percent
            if (val < p) {
                last = val;
            }
            // if val >= percent then the val that we could show has been reached
            else if (val >= p - 1) {
                return this.degraded[last];
            }
        }
        // if its the last one return the last
        return this.degraded[last];
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    whichProgress(progress) {
        try {
            return Math.round(+progress * 100) / 100;
        }
        catch (_a) {
            return progress;
        }
    }
}
ProgressBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'progress-bar',
                template: `
  <div class=\"progress-outer\">
    <div class=\"progress-inner\" [style.width]=\"whichProgress(progress) + '%'\" [style.background-color]=\"degraded == null ? color : whichColor(progress)\">
      {{whichProgress(progress)}}%
    </div>
  </div>
  `,
                styles: [`
        .progress-outer {
          width: 96%;
          margin: 10px 2%;
          padding: 3px;
          background-color: #f4f4f4;
          border: 1px solid #dcdcdc;
          color: #fff;
          border-radius: 20px;
          text-align: center;
        }
        .progress-inner {
          min-width: 15%;
          white-space: nowrap;
          overflow: hidden;
          padding: 0px;
          border-radius: 20px;
  `]
            }] }
];
/** @nocollapse */
ProgressBarComponent.ctorParameters = () => [];
ProgressBarComponent.propDecorators = {
    progress: [{ type: Input, args: ['progress',] }],
    color: [{ type: Input, args: ['color',] }],
    degraded: [{ type: Input, args: ['color-degraded',] }]
};
if (false) {
    /**
     * Inputs *
     * @type {?}
     */
    ProgressBarComponent.prototype.progress;
    /** @type {?} */
    ProgressBarComponent.prototype.color;
    /** @type {?} */
    ProgressBarComponent.prototype.degraded;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1wcm9ncmVzcy1iYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1wcm9ncmVzcy1iYXIvIiwic291cmNlcyI6WyJsaWIvYW5ndWxhci1wcm9ncmVzcy1iYXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQWdDakQsTUFBTSxPQUFPLG9CQUFvQjtJQVFqQztRQUNFLGdCQUFnQjtRQUNoQixJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztJQUN6QixDQUFDOzs7Ozs7SUFNRCxVQUFVLENBQUMsT0FBZTs7O1lBRXBCLENBQUMsR0FBZSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDOUMsMkJBQTJCO1FBQzNCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixxQkFBcUI7UUFDckIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7OztZQUV4QixDQUFDLEdBQUcsQ0FBQyxPQUFPO1FBQ2hCLDhDQUE4Qzs7OztZQUMxQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLGdCQUFnQjtRQUNoQixLQUFJLElBQUksR0FBRyxJQUFJLENBQUMsRUFBQztZQUNmLG1DQUFtQztZQUNuQyxJQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUM7Z0JBQ1QsSUFBSSxHQUFHLEdBQUcsQ0FBQzthQUNaO1lBQ0QscUVBQXFFO2lCQUNoRSxJQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUUsQ0FBQyxFQUFDO2dCQUNsQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDNUI7U0FDRjtRQUNELHNDQUFzQztRQUN0QyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFFRCxhQUFhLENBQUMsUUFBZ0I7UUFDNUIsSUFBRztZQUNELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7U0FDMUM7UUFDRCxXQUFLO1lBQ0gsT0FBTyxRQUFRLENBQUM7U0FDakI7SUFDSCxDQUFDOzs7WUFoRkEsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFDSixjQUFjO2dCQW1CbEIsUUFBUSxFQUNSOzs7Ozs7R0FNQzt5QkF6QlE7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJSO2FBU0Y7Ozs7O3VCQUlFLEtBQUssU0FBQyxVQUFVO29CQUNoQixLQUFLLFNBQUMsT0FBTzt1QkFDYixLQUFLLFNBQUMsZ0JBQWdCOzs7Ozs7O0lBRnZCLHdDQUFvQzs7SUFDcEMscUNBQThCOztJQUM5Qix3Q0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjpcclxuICAgICAgJ3Byb2dyZXNzLWJhcicsXHJcbiAgc3R5bGVzOiBbYFxyXG4gICAgICAgIC5wcm9ncmVzcy1vdXRlciB7XHJcbiAgICAgICAgICB3aWR0aDogOTYlO1xyXG4gICAgICAgICAgbWFyZ2luOiAxMHB4IDIlO1xyXG4gICAgICAgICAgcGFkZGluZzogM3B4O1xyXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Y0ZjRmNDtcclxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNkY2RjZGM7XHJcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XHJcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5wcm9ncmVzcy1pbm5lciB7XHJcbiAgICAgICAgICBtaW4td2lkdGg6IDE1JTtcclxuICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICAgICAgcGFkZGluZzogMHB4O1xyXG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogMjBweDtcclxuICBgXSxcclxuICB0ZW1wbGF0ZTpcclxuICBgXHJcbiAgPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3Mtb3V0ZXJcXFwiPlxyXG4gICAgPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3MtaW5uZXJcXFwiIFtzdHlsZS53aWR0aF09XFxcIndoaWNoUHJvZ3Jlc3MocHJvZ3Jlc3MpICsgJyUnXFxcIiBbc3R5bGUuYmFja2dyb3VuZC1jb2xvcl09XFxcImRlZ3JhZGVkID09IG51bGwgPyBjb2xvciA6IHdoaWNoQ29sb3IocHJvZ3Jlc3MpXFxcIj5cclxuICAgICAge3t3aGljaFByb2dyZXNzKHByb2dyZXNzKX19JVxyXG4gICAgPC9kaXY+XHJcbiAgPC9kaXY+XHJcbiAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUHJvZ3Jlc3NCYXJDb21wb25lbnQge1xyXG5cclxuLyoqIElucHV0cyAqKi9cclxuICBASW5wdXQoJ3Byb2dyZXNzJykgcHJvZ3Jlc3M6IHN0cmluZztcclxuICBASW5wdXQoJ2NvbG9yJykgY29sb3I6IHN0cmluZztcclxuICBASW5wdXQoJ2NvbG9yLWRlZ3JhZGVkJykgZGVncmFkZWQ6IGFueTtcclxuXHJcblxyXG5jb25zdHJ1Y3RvcigpIHtcclxuICAvLyBEZWZhdWx0IGNvbG9yXHJcbiAgdGhpcy5jb2xvciA9IFwiIzQ4OGFmZlwiO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIGNvbG9yIGZvciBhIGNlcnRhaW4gcGVyY2VudFxyXG4gKiBAcGFyYW0gcGVyY2VudCBUaGUgY3VycmVudCBwcm9ncmVzc1xyXG4gKi9cclxud2hpY2hDb2xvcihwZXJjZW50OiBzdHJpbmcpe1xyXG4gIC8vIEdldCBhbGwgZW50cmllcyBpbmRleCBhcyBhbiBhcnJheVxyXG4gIGxldCBrOiBBcnJheTxhbnk+ID0gT2JqZWN0LmtleXModGhpcy5kZWdyYWRlZCk7XHJcbiAgLy8gQ29udmVydCBzdHJpbmcgdG8gbnVtYmVyXHJcbiAgay5mb3JFYWNoKChlLCBpKSA9PiBrW2ldID0gK2UpO1xyXG4gIC8vIFNvcnQgdGhlbSBieSB2YWx1ZVxyXG4gIGsgPSBrLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcclxuICAvLyBQZXJjZW50IGFzIG51bWJlclxyXG4gIGxldCBwID0gK3BlcmNlbnRcclxuICAvLyBTZXQgbGFzdCBieSBkZWZhdWx0IGFzIHRoZSBmaXJzdCBvY2N1cnJlbmNlXHJcbiAgbGV0IGxhc3QgPSBrWzBdO1xyXG4gIC8vIEZvcmVhY2gga2V5cyBcclxuICBmb3IobGV0IHZhbCBvZiBrKXtcclxuICAgIC8vIGlmIGN1cnJlbnQgdmFsIGlzIDwgdGhhbiBwZXJjZW50XHJcbiAgICBpZih2YWwgPCBwKXtcclxuICAgICAgbGFzdCA9IHZhbDtcclxuICAgIH1cclxuICAgIC8vIGlmIHZhbCA+PSBwZXJjZW50IHRoZW4gdGhlIHZhbCB0aGF0IHdlIGNvdWxkIHNob3cgaGFzIGJlZW4gcmVhY2hlZFxyXG4gICAgZWxzZSBpZih2YWwgPj0gcCAtMSl7XHJcbiAgICAgIHJldHVybiB0aGlzLmRlZ3JhZGVkW2xhc3RdO1xyXG4gICAgfVxyXG4gIH1cclxuICAvLyBpZiBpdHMgdGhlIGxhc3Qgb25lIHJldHVybiB0aGUgbGFzdFxyXG4gIHJldHVybiB0aGlzLmRlZ3JhZGVkW2xhc3RdO1xyXG59XHJcblxyXG53aGljaFByb2dyZXNzKHByb2dyZXNzOiBzdHJpbmcpe1xyXG4gIHRyeXtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKCtwcm9ncmVzcyAqIDEwMCkgLyAxMDA7XHJcbiAgfVxyXG4gIGNhdGNoe1xyXG4gICAgcmV0dXJuIHByb2dyZXNzO1xyXG4gIH1cclxufVxyXG59Il19