{"version":3,"file":"angular-progress-bar.js.map","sources":["ng://angular-progress-bar/lib/angular-progress-bar.component.ts","ng://angular-progress-bar/lib/angular-progress-bar.module.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector:\r\n      'progress-bar',\r\n  styles: [`\r\n        .progress-outer {\r\n          width: 96%;\r\n          margin: 10px 2%;\r\n          padding: 3px;\r\n          background-color: #f4f4f4;\r\n          border: 1px solid #dcdcdc;\r\n          color: #fff;\r\n          border-radius: 20px;\r\n          text-align: center;\r\n        }\r\n        .progress-inner {\r\n          min-width: 15%;\r\n          white-space: nowrap;\r\n          overflow: hidden;\r\n          padding: 0px;\r\n          border-radius: 20px;\r\n  `],\r\n  template:\r\n  `\r\n  <div class=\\\"progress-outer\\\">\r\n    <div class=\\\"progress-inner\\\" [style.width]=\\\"whichProgress(progress) + '%'\\\" [style.background-color]=\\\"degraded == null ? color : whichColor(progress)\\\">\r\n      {{whichProgress(progress)}}%\r\n    </div>\r\n  </div>\r\n  `\r\n})\r\nexport class ProgressBarComponent {\r\n\r\n/** Inputs **/\r\n  @Input('progress') progress: string;\r\n  @Input('color') color: string;\r\n  @Input('color-degraded') degraded: any;\r\n\r\n\r\nconstructor() {\r\n  // Default color\r\n  this.color = \"#488aff\";\r\n}\r\n\r\n/**\r\n * Returns a color for a certain percent\r\n * @param percent The current progress\r\n */\r\nwhichColor(percent: string){\r\n  // Get all entries index as an array\r\n  let k: Array<any> = Object.keys(this.degraded);\r\n  // Convert string to number\r\n  k.forEach((e, i) => k[i] = +e);\r\n  // Sort them by value\r\n  k = k.sort((a, b) => a - b);\r\n  // Percent as number\r\n  let p = +percent\r\n  // Set last by default as the first occurrence\r\n  let last = k[0];\r\n  // Foreach keys \r\n  for(let val of k){\r\n    // if current val is < than percent\r\n    if(val < p){\r\n      last = val;\r\n    }\r\n    // if val >= percent then the val that we could show has been reached\r\n    else if(val >= p -1){\r\n      return this.degraded[last];\r\n    }\r\n  }\r\n  // if its the last one return the last\r\n  return this.degraded[last];\r\n}\r\n\r\nwhichProgress(progress: string){\r\n  try{\r\n    return Math.round(+progress * 100) / 100;\r\n  }\r\n  catch{\r\n    return progress;\r\n  }\r\n}\r\n}","import { NgModule } from '@angular/core';\r\nimport { ProgressBarComponent } from './angular-progress-bar.component';\r\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [ProgressBarComponent],\r\n  exports: [ProgressBarComponent],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class ProgressBarModule { }"],"names":[],"mappings":";;;;;;;AAAA,MAgCa,oBAAoB;IAQjC;;QAEE,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;KACxB;;;;;;IAMD,UAAU,CAAC,OAAe;;;YAEpB,CAAC,GAAe,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;;QAE9C,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;QAE/B,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;YAExB,CAAC,GAAG,CAAC,OAAO;;;;;YAEZ,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;;QAEf,KAAI,IAAI,GAAG,IAAI,CAAC,EAAC;;YAEf,IAAG,GAAG,GAAG,CAAC,EAAC;gBACT,IAAI,GAAG,GAAG,CAAC;aACZ;;iBAEI,IAAG,GAAG,IAAI,CAAC,GAAE,CAAC,EAAC;gBAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aAC5B;SACF;;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC5B;;;;;IAED,aAAa,CAAC,QAAgB;QAC5B,IAAG;YACD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;SAC1C;QACD,WAAK;YACH,OAAO,QAAQ,CAAC;SACjB;KACF;;;YAhFA,SAAS,SAAC;gBACT,QAAQ,EACJ,cAAc;gBAmBlB,QAAQ,EACR;;;;;;GAMC;yBAzBQ;;;;;;;;;;;;;;;;;GAiBR;aASF;;;;;uBAIE,KAAK,SAAC,UAAU;oBAChB,KAAK,SAAC,OAAO;uBACb,KAAK,SAAC,gBAAgB;;;;;;;ACrCzB,MAaa,iBAAiB;;;YAR7B,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;iBACb;gBACD,YAAY,EAAE,CAAC,oBAAoB,CAAC;gBACpC,OAAO,EAAE,CAAC,oBAAoB,CAAC;gBAC/B,OAAO,EAAE,CAAC,sBAAsB,CAAC;aAClC;;;;;;;;;;;;;;;"}
